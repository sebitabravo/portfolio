---
import Card from '@/components/ui/Card.astro'
import Badge from '@/components/ui/Badge.astro'
import type { WorkExperience } from '@/types'
import { formatDate } from '@/lib/utils'
import { getTechStyle } from '@/lib/tech-colors'

interface Props {
  work: WorkExperience
}

const { work } = Astro.props
const { company, position, description, startDate, endDate, current, location, skills, logo, url } = work.data

const formatDateRange = () => {
  const start = formatDate(startDate).split(' ').slice(0, 2).join(' ')
  const end = current ? 'Present' : endDate ? formatDate(endDate).split(' ').slice(0, 2).join(' ') : ''
  return `${start} - ${end}`
}
---

<Card class="relative hover:shadow-lg transition-shadow duration-300">
  <div class="flex gap-6">
    {logo && (
      <div class="flex-shrink-0">
        <div class="w-16 h-16 rounded-xl bg-gradient-to-br from-neutral-100 to-neutral-200 dark:from-neutral-800 dark:to-neutral-900 flex items-center justify-center overflow-hidden shadow-sm border border-neutral-200 dark:border-neutral-700">
          <img src={logo} alt={company} class="w-full h-full object-cover" />
        </div>
      </div>
    )}

    <div class="flex-1 min-w-0">
      {/* Header Section */}
      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 mb-3">
        <div class="flex-1 min-w-0">
          <h3 class="text-xl font-bold mb-1 flex items-center gap-2 flex-wrap">
            {url ? (
              <a
                href={url}
                target="_blank"
                rel="noopener noreferrer"
                class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors no-underline"
              >
                {company}
              </a>
            ) : (
              company
            )}
          </h3>
          <p class="text-base font-semibold text-muted-foreground">
            {position}
          </p>
        </div>
        {current && (
          <Badge variant="success" class="self-start">Current</Badge>
        )}
      </div>

      {/* Date & Location */}
      <div class="flex flex-wrap items-center gap-2 text-sm text-muted-foreground mb-4">
        <div class="flex items-center gap-1.5">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span class="font-medium">{formatDateRange()}</span>
        </div>
        {location && (
          <div class="flex items-center gap-1.5">
            <span class="text-muted-foreground/50">â€¢</span>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <span>{location}</span>
          </div>
        )}
      </div>

      {/* Description */}
      <p class="text-sm leading-relaxed text-foreground/80 mb-4">
        {description}
      </p>

      {/* Skills/Technologies */}
      <div class="flex flex-wrap gap-2 pt-3 border-t border-neutral-200 dark:border-neutral-800">
        {skills.map((skill) => {
          const techStyle = getTechStyle(skill)
          return (
            <Badge
              variant="tech"
              class={`${techStyle.bg} ${techStyle.text} ${techStyle.border} ${techStyle.hoverBg} hover:scale-105 cursor-default`}
            >
              {skill}
            </Badge>
          )
        })}
      </div>
    </div>
  </div>
</Card>

---
// Header Component - Navigation
import { personalInfo, getTranslations, type Locale } from "@/lib/data"
import ThemeToggle from "./ThemeToggle.astro"
import LanguageToggle from "./LanguageToggle.astro"

interface Props {
  locale?: Locale
}

const { locale = 'es' } = Astro.props
const t = getTranslations(locale)

const navItems = [
  {
    title: t.nav.experience,
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title: t.nav.projects,
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: t.nav.education,
    label: "educacion",
    url: "/#educacion",
  },
  {
    title: t.nav.certifications,
    label: "certificaciones",
    url: "/#certificaciones",
  },
  {
    title: t.nav.about,
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: t.nav.contact,
    label: "contacto",
    url: `mailto:${personalInfo.email}`,
  },
]
---

<header
  class="fixed top-0 z-50 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-foreground/80 justify-center items-center gap-x-1 glass"
  >
    {
      navItems.map((link) => (
        <a
          class="relative hidden md:block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-500"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }

    <div class="flex items-center gap-1 md:ml-2 md:border-l md:border-border/50 md:pl-2">
      <ThemeToggle />
      <LanguageToggle />
    </div>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500")
            } else {
              item.classList.remove("text-yellow-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
    background-color: transparent;
  }

  @keyframes nav-shadown {
    to {
      background-color: hsl(var(--card) / 0.8);
      box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      backdrop-filter: blur(8px);
      --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
      --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) hsl(var(--border));
      box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    }
  }
</style>

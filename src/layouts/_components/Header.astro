---
import { siteConfig } from '@/lib/config'
import Container from '@/shared/components/Container.astro'
import LanguagePicker from './LanguagePicker.astro'
import ThemeToggle from './ThemeToggle.astro'
import { getTranslations, type Locale, getLocaleFromUrl } from '@/lib/i18n'

const locale = getLocaleFromUrl(Astro.url)
const t = getTranslations(locale)

const navItems = [
  { label: t.nav.home, href: '/' },
  { label: t.nav.projects, href: '#projects' },
  { label: 'Experience', href: '#experience' },
  { label: t.nav.about, href: '#about' },
]
---

<header class="sticky top-0 z-50 w-full glass">
  <Container>
    <nav class="flex h-16 md:h-20 items-center justify-between">
      <!-- Logo -->
      <a href="/" class="group flex items-center space-x-2 no-underline home-link">
        <span class="text-lg md:text-xl font-bold text-gradient hover:opacity-80 transition-opacity">{siteConfig.name}</span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center gap-1">
        {navItems.map((item) => (
          <a
            href={item.href}
            class:list={[
              'px-4 py-2 text-sm font-medium rounded-lg transition-all no-underline text-foreground hover:text-primary-600 dark:hover:text-primary-300 focus:text-primary-600 dark:focus:text-primary-300 hover:bg-primary-50 dark:hover:bg-primary-950/30 focus:bg-primary-50 dark:focus:bg-primary-950/30',
              (item.href.startsWith('#') || item.href === '/') && 'scroll-link'
            ]}
          >
            {item.label}
          </a>
        ))}
        <div class="ml-1 flex items-center gap-1">
          <LanguagePicker />
          <ThemeToggle />
        </div>
      </div>

      <!-- Mobile Menu Button -->
      <div class="flex md:hidden items-center gap-2">
        <LanguagePicker />
        <ThemeToggle />
        <button
          id="mobile-menu-button"
          class="p-2 text-foreground hover:bg-primary-50 dark:hover:bg-primary-950/30 hover:text-primary-600 dark:hover:text-primary-300 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500"
          aria-label="Toggle menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path id="menu-icon" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            <path id="close-icon" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </nav>

    <!-- Mobile Navigation -->
    <div
      id="mobile-menu"
      class="hidden md:hidden pb-4 animate-slide-down"
    >
      <div class="flex flex-col gap-1">
        {navItems.map((item) => (
          <a
            href={item.href}
            class:list={[
              'px-4 py-3 text-base font-medium rounded-lg transition-all no-underline text-foreground hover:text-primary-600 dark:hover:text-primary-300 focus:text-primary-600 dark:focus:text-primary-300 hover:bg-primary-50 dark:hover:bg-primary-950/30 focus:bg-primary-50 dark:focus:bg-primary-950/30',
              (item.href.startsWith('#') || item.href === '/') && 'scroll-link'
            ]}
          >
            {item.label}
          </a>
        ))}
      </div>
    </div>
  </Container>
</header>

<script>
  function initHeader() {
    const button = document.getElementById('mobile-menu-button')
    const menu = document.getElementById('mobile-menu')
    const menuIcon = document.getElementById('menu-icon')
    const closeIcon = document.getElementById('close-icon')

    if (!button || !menu) return

    // Mobile menu toggle
    const toggleMenu = () => {
      menu?.classList.toggle('hidden')
      menuIcon?.classList.toggle('hidden')
      closeIcon?.classList.toggle('hidden')
    }

    // Use event delegation for better performance
    button.addEventListener('click', toggleMenu)

    // Smooth scroll for anchor links
    const handleLinkClick = (e: Event) => {
      const link = (e.target as HTMLElement).closest('a')
      if (!link) return

      const href = link.getAttribute('href')
      if (!href) return

      // Handle home link - scroll to top
      if (href === '/') {
        e.preventDefault()
        menu?.classList.add('hidden')
        menuIcon?.classList.remove('hidden')
        closeIcon?.classList.add('hidden')
        window.scrollTo({ top: 0, behavior: 'smooth' })
      }
      // Handle anchor links
      else if (href.startsWith('#')) {
        e.preventDefault()
        const target = document.querySelector(href)
        if (target) {
          menu?.classList.add('hidden')
          menuIcon?.classList.remove('hidden')
          closeIcon?.classList.add('hidden')

          const headerOffset = window.innerWidth < 768 ? 80 : 100
          const elementPosition = target.getBoundingClientRect().top
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset

          window.scrollTo({ top: offsetPosition, behavior: 'smooth' })
        }
      }
    }

    // Use event delegation for links
    document.addEventListener('click', handleLinkClick)

    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement
      if (menu && !menu.classList.contains('hidden') &&
          !menu.contains(target) && !button.contains(target)) {
        menu.classList.add('hidden')
        menuIcon?.classList.remove('hidden')
        closeIcon?.classList.add('hidden')
      }
    })
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHeader)
  } else {
    initHeader()
  }

  // Re-initialize after page transitions
  document.addEventListener('astro:after-swap', initHeader)
</script>

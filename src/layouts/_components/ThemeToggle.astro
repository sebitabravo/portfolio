---
// Theme Toggle Component - Pure Astro with smooth transitions
---

<button
  id="theme-toggle"
  type="button"
  class="relative flex items-center justify-center w-10 h-10 text-neutral-700 dark:text-neutral-300 hover:bg-primary-50 dark:hover:bg-primary-950/30 hover:text-primary-600 dark:hover:text-primary-400 rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500"
  aria-label="Toggle theme"
>
  <!-- Sun icon (shown in dark mode) -->
  <svg
    id="theme-toggle-light-icon"
    class="w-5 h-5 transition-all duration-300"
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
    ></path>
  </svg>
  <!-- Moon icon (shown in light mode) -->
  <svg
    id="theme-toggle-dark-icon"
    class="w-5 h-5 absolute transition-all duration-300"
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
  </svg>
</button>

<style>
  /* Light mode: show moon, hide sun */
  #theme-toggle-light-icon {
    opacity: 0;
    transform: scale(0) rotate(-90deg);
  }

  #theme-toggle-dark-icon {
    opacity: 1;
    transform: scale(1) rotate(0deg);
  }

  /* Dark mode: show sun, hide moon */
  :global(.dark) #theme-toggle-light-icon {
    opacity: 1;
    transform: scale(1) rotate(0deg);
  }

  :global(.dark) #theme-toggle-dark-icon {
    opacity: 0;
    transform: scale(0) rotate(90deg);
  }
</style>

<script>
  // Theme toggle functionality
  function initThemeToggle() {
    const themeToggleButtons = document.querySelectorAll('#theme-toggle');

    if (!themeToggleButtons.length) {
      console.warn('ThemeToggle: No toggle buttons found');
      return;
    }

    const handleThemeToggle = () => {
      const htmlElement = document.documentElement;
      const currentTheme = htmlElement.classList.contains('dark') ? 'dark' : 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

      // Add transition class for smooth animation
      htmlElement.classList.add('theme-transition');

      // Toggle theme class
      if (newTheme === 'dark') {
        htmlElement.classList.add('dark');
      } else {
        htmlElement.classList.remove('dark');
      }

      // Save preference to localStorage
      try {
        localStorage.setItem('theme', newTheme);
      } catch (e) {
        console.error('Failed to save theme preference:', e);
      }

      // Remove transition class after animation completes
      setTimeout(() => {
        htmlElement.classList.remove('theme-transition');
      }, 300);

      // Dispatch custom event for other components that might need to react
      window.dispatchEvent(new CustomEvent('theme-changed', { detail: { theme: newTheme } }));
    };

    // Attach click listeners to all theme toggle buttons
    themeToggleButtons.forEach((button) => {
      // Remove existing listeners by cloning the button
      const newButton = button.cloneNode(true) as HTMLElement;
      button.parentNode?.replaceChild(newButton, button);
      newButton.addEventListener('click', handleThemeToggle);
    });
  }

  // Initialize on DOMContentLoaded
  function init() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initThemeToggle);
    } else {
      initThemeToggle();
    }
  }

  // Initialize for first page load
  init();

  // Re-initialize after Astro view transitions
  document.addEventListener('astro:after-swap', () => {
    initThemeToggle();
  });

  // Handle page show event (for back/forward navigation)
  window.addEventListener('pageshow', (event) => {
    if (event.persisted) {
      initThemeToggle();
    }
  });
</script>
